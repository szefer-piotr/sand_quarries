dat <- cbind(gof2sia, stages)
ggplot(dat, aes(x=succession, y=CCA)) +
geom_point()
ggplot(dat, aes(x=succession, y=CA)) +
geom_point()
ggplot(dat, aes(x=succession, y=CCA)) +
geom_point()
dat <- cbind(gof2sia, stages)
ggplot(dat, aes(x=succession, y=CCA)) +
geom_point()
ggplot(dat, aes(x=succession, y=CA)) +
geom_point()
gof2spa
gof2sia <- inertcomp(rdaa, display = "sites", unity = T)
gof2sia
?inertcomp
gof2spa <- inertcomp(rdaa, display = "species", unity = T)
gof2sia <- inertcomp(rdaa, display = "sites", unity = T)
dat <- cbind(gof2sia, stages)
ggplot(dat, aes(x=succession, y=CCA)) +
geom_point()
ggplot(dat, aes(x=succession, y=CA)) +
geom_point()
ggplot(dat, aes(x=succession, y=CA)) +
geom_point() +
stat_summary(fun.data=mean_cl_boot,
geom="pointrange", lwd=0.8) +
stat_summary(fun.y=mean, geom="point",cex = 2) +
stat_summary(fun.y=mean, geom="line",lwd=1, lty=2)+
gof2sp[rownames(gof2sp) == nam]
ggplot(dat, aes(x=succession, y=CA)) +
geom_point() +
stat_summary(fun.data=mean_cl_boot,
geom="pointrange", lwd=0.8) +
stat_summary(fun.y=mean, geom="point",cex = 2) +
stat_summary(fun.y=mean, geom="line",lwd=1, lty=2)
gof2spa <- inertcomp(rdas, display = "species", unity = T)
gof2sia <- inertcomp(rdas, display = "sites", unity = T)
dat <- cbind(gof2sia, stages)
ggplot(dat, aes(x=succession, y=CCA)) +
geom_point()
ggplot(dat, aes(x=succession, y=CA)) +
geom_point() +
stat_summary(fun.data=mean_cl_boot,
geom="pointrange", lwd=0.8) +
stat_summary(fun.y=mean, geom="point",cex = 2) +
stat_summary(fun.y=mean, geom="line",lwd=1, lty=2)
gof2spc <- inertcomp(rdas, display = "species", unity = T)
gof2sic <- inertcomp(rdas, display = "sites", unity = T)
dat <- cbind(gof2sia, stages)
ggplot(dat, aes(x=succession, y=CCA)) +
geom_point()
ggplot(dat, aes(x=succession, y=CA)) +
geom_point() +
stat_summary(fun.data=mean_cl_boot,
geom="pointrange", lwd=0.8) +
stat_summary(fun.y=mean, geom="point",cex = 2) +
stat_summary(fun.y=mean, geom="line",lwd=1, lty=2)
gof2spa <- inertcomp(rdac, display = "species", unity = T)
gof2sia <- inertcomp(rdac, display = "sites", unity = T)
dat <- cbind(gof2sia, stages)
ggplot(dat, aes(x=succession, y=CCA)) +
geom_point()
ggplot(dat, aes(x=succession, y=CA)) +
geom_point() +
stat_summary(fun.data=mean_cl_boot,
geom="pointrange", lwd=0.8) +
stat_summary(fun.y=mean, geom="point",cex = 2) +
stat_summary(fun.y=mean, geom="line",lwd=1, lty=2)
# Source data processing script ----
source("data/data_processing.R")
library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
abund_int1 <- glm(abun~1+GS,
family = "poisson", data = desasc)
gof2spa <- inertcomp(rdaa, display = "species", unity = T)
gof2sia <- inertcomp(rdaa, display = "sites", unity = T)
dat <- cbind(gof2sia, stages)
ggplot(dat, aes(x=succession, y=CCA)) +
geom_point()
ggplot(dat, aes(x=succession, y=CA)) +
geom_point() +
stat_summary(fun.data=mean_cl_boot,
geom="pointrange", lwd=0.8) +
stat_summary(fun.y=mean, geom="point",cex = 2) +
stat_summary(fun.y=mean, geom="line",lwd=1, lty=2)
# Source data processing script ----
source("data/data_processing.R")
library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
abund_int1 <- glm(abun~1+GS,
family = "poisson", data = desasc)
abund_int2 <- glm.nb(abun~1+GS, data = desasc)
abund_int3 <- glm(abun~1+GS, data = desasc)
# Select the best model
AIC(abund_int1, abund_int2,abund_int3)
# See the summary
summary(abund_int2)
# >>> Post-hoc ----
inter.test1 <- emmeans(abund_int2, "GS")
phabu <- cld(inter.test1, Letter="abcdefghijklm")
# Select the best model
AIC(abund_int1, abund_int2,abund_int3)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
options(knitr.table.format = "html")
kable(summary(abund_int2))
library(knitr)
library(kableExtra)
kable(summary(abund_int2))
summary(abund_int2)
kable(summary(abund_int2)$coefficients)
kable(round(summary(abund_int2)$coefficients),3)
kable(round(summary(abund_int2)$coefficients,3))
summary(abund_int2)
?glm.nb
?glm
nam <- "ect_rub"
dsts <- cbind(stages, asc[,colnames(asc) == nam])
colnames(dsts) <- c("site","succession",nam)
ggplot(dsts, aes(y = log(dsts[,3]+1), x = succession)) +
geom_point() +
geom_smooth()
nam <- "col_fod"
dsts <- cbind(stages, asc[,colnames(asc) == nam])
colnames(dsts) <- c("site","succession",nam)
ggplot(dsts, aes(y = log(dsts[,3]+1), x = succession)) +
geom_point() +
geom_smooth()
gof
# Which group had stronger relationships
gof2sp
gof2sp <- inertcomp(rda1, display = "species", proportional = F)
# Which group had stronger relationships
gof2sp
# Which group had stronger relationships
gof2sp[groups == "Spheciformes",]
# Which group had stronger relationships
sum(gof2sp[groups == "Spheciformes",]$CCA)
# Which group had stronger relationships
sum(gof2sp[groups == "Spheciformes",CCA])
# Which group had stronger relationships
sum(gof2sp[groups == "Spheciformes","CCA"])
sum(gof2sp[groups == "Apoidea","CCA"])
groups
sum(gof2sp[groups == "Apiformes","CCA"])
sum(gof2sp[groups == "Chrysididae","CCA"])
# Which group had stronger relationships
sum(gof2sp[groups == "Spheciformes","CCA"])
sum(gof2sp[groups == "Apiformes","CCA"])
sum(gof2sp[groups == "Chrysididae","CCA"])
kable(selected_gof)
kable(gof[selected_gof, ])
kable(cbind(gof[selected_gof, ], groups[gof[selected_gof, ] %in% colnames(asc)])
kable(cbind(gof[selected_gof, ], groups[gof[selected_gof, ] %in% colnames(asc)]))
kable(cbind(gof[selected_gof, ], groups[rownames(gof[selected_gof, ]) %in% colnames(asc)]))
rownames(gof[selected_gof, ]) %in% colnames(asc)]
gof[selected_gof, ]
# # Which group had stronger relationships
# sum(gof2sp[groups == "Spheciformes","CCA"])
# sum(gof2sp[groups == "Apiformes","CCA"])
# sum(gof2sp[groups == "Chrysididae","CCA"])
tabs <- gof[selected_gof, ]
rownames(gof[selected_gof, ])
rownames(gof[selected_gof, ]) %in% colnames(asc)
groups[colnames(asc) %in% rownames(gof[selected_gof, ])])
groups[colnames(asc) %in% rownames(gof[selected_gof, ])]
R2
library(vegan)
# Transformation
asc <- decostand(asc, "hel")
# 1. RDA ordination ----
rda1 <- rda(asc~as.factor(succession), data=stages)
rdaa <- rda(asc[,groups=="Apiformes"]~as.factor(succession), data=stages)
rdas <- rda(asc[,groups=="Spheciformes"]~as.factor(succession), data=stages)
rdac <- rda(asc[,groups=="Chrysididae"]~as.factor(succession), data=stages)
# cca1 <- cca(asc~succession, data=stages)
# m <- cca1
m <- rda1
#>>> Statistical test ----
anova(m, by="terms", permutations = 999)
anova(m, by="axis", permutations = 999)
# both axes are significant
# Succession is a statistically significant factor
# >>> R2 -----
coef(m)
R2 <- RsquareAdj(m)$r.squared
R2
sph
colnames(sph)
tabs <- round(gof[selected_gof, ],3)
tabs
grp <- groups[which(colnames(asc) %in% rownames(gof[selected_gof, ]))]
grp
which(colnames(asc) %in% rownames(gof[selected_gof, ])
)
?which
colnames(asc)
grp <- groups[which(colnames(asc) == rownames(gof[selected_gof, ]))]
kable(cbind(tabs, grp)) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
which(rownames(gof[selected_gof, ]) %in% colnames(asc))
which(colnames(asc) %in rownames(gof[selected_gof, ]))
which(colnames(asc) %in% rownames(gof[selected_gof, ]))
colnames(asc) %in% rownames(gof[selected_gof, ])
which(colnames(asc) %in% rownames(gof[selected_gof, ]))
?which
which(colnames(asc) == rownames(gof[selected_gof, ]))
rownames(gof[selected_gof, ])
rownames(gof[selected_gof, ])
which(rownames(gof[selected_gof, ]) %in% colnames(asc))
which(asc[, rownames(gof[selected_gof, ])])
order(asc[, rownames(gof[selected_gof, ])])
colnames(asc[, rownames(gof[selected_gof, ])])
which(colnames(asc[, rownames(gof[selected_gof, ])]))
colnames(asc[, rownames(gof[selected_gof, ]))
colnames(asc[, rownames(gof[selected_gof, ])
colnames(asc[, rownames(gof[selected_gof, ])])
colnames(asc[, rownames(gof[selected_gof, ])])
# # Which group had stronger relationships
# sum(gof2sp[groups == "Spheciformes","CCA"])
# sum(gof2sp[groups == "Apiformes","CCA"])
# sum(gof2sp[groups == "Chrysididae","CCA"])
colnames(asc)
groups
# # Which group had stronger relationships
# sum(gof2sp[groups == "Spheciformes","CCA"])
# sum(gof2sp[groups == "Apiformes","CCA"])
# sum(gof2sp[groups == "Chrysididae","CCA"])
cbind(colnames(asc),groups)
# # Which group had stronger relationships
# sum(gof2sp[groups == "Spheciformes","CCA"])
# sum(gof2sp[groups == "Apiformes","CCA"])
# sum(gof2sp[groups == "Chrysididae","CCA"])
nmgr <- cbind(colnames(asc),groups)
# # Which group had stronger relationships
# sum(gof2sp[groups == "Spheciformes","CCA"])
# sum(gof2sp[groups == "Apiformes","CCA"])
# sum(gof2sp[groups == "Chrysididae","CCA"])
nmgr <- as.data.frame(cbind(colnames(asc),groups))
rownames(nmgr) <- nmgr$V1
nmgr[rownames(gof[selected_gof, ]), ]
grp
grp <- nmgr[rownames(gof[selected_gof, ]), ]$groups
grp
cbind(tabs, grp)
data.frame(tabs, grp)
kable(data.frame(tabs, Group = grp)) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
install.packages("geoveg")
# Source data processing script ----
source("data/data_processing.R")
library(vegan)
# Transformation
asc <- decostand(asc, "hel")
# 1. RDA ordination ----
rda1 <- rda(asc~as.factor(succession), data=stages)
# m <- cca1
m <- rda1
scores(m)
# GOF - total inertia explained for given number of axes
gof <- goodness(m, display = "species", statistic = "explained",summarize = FALSE)
gof
scores(m)
spc <- spenvcor(m)
spc
?spenvcor
ordiselect <-  function(matrix, ord, ablim = 1, fitlim = 1, choices = c(1,2), method = "axes", env, p.max = 0.05, freq = FALSE) {
if(!is.data.frame(matrix)) {
matrix <- data.frame(matrix)
}
if(freq == F) {
abund <- apply(matrix, 2, sum)
} else {
abund <- apply(matrix>0, 2, sum)
}
if(method == "axes") {
scores <- data.frame(scores(ord, display="species", choices=choices))
scores1 <- scores[,1]
scores2 <- scores[,2]
rownames(scores[abund >= quantile(abund, 1 - ablim) &
(scores1 >= quantile(scores1, 1-0.5*fitlim) |
scores1 <= quantile(scores1,0.5*fitlim) |
scores2 >= quantile(scores2, 1-0.5*fitlim) |
scores2 <= quantile(scores2,0.5*fitlim))
,])
}  else if(method=="vars") {
if(class(env) != "envfit") {
print("FATAL: Fitted environmental variables are no result of envfit()")
} else {
scores_spec <- data.frame(scores(ord, display="species", choices=choices))
sig <- env$vectors$pvals
scores_env <- data.frame(scores(env, display="vectors"))
scores_env <- scores_env[sig<p.max,]
if(nrow(scores_env) == 0) {
print("WARNING: No significant environmental variables. Only abundance limit used for selection.")
names(abund[abund >= quantile(abund, 1 - ablim)])
} else if(nrow(scores_env) == 1) {
euclid<-data.frame(fields::rdist(scores_spec, scores_env))
names(euclid)<-rownames(scores_env)
rownames(euclid)<-names(matrix)
rownames(data.frame(euclid[abund > quantile(abund, 1 - ablim) &
(euclid <= quantile(unlist(euclid), 0.5*fitlim) |
euclid >= quantile(unlist(euclid), 1-0.5*fitlim)), ,drop=FALSE]))
} else {
euclid<-data.frame(fields::rdist(scores_spec, scores_env))
names(euclid)<-rownames(scores_env)
rownames(euclid)<-names(matrix)
best_fit<-euclid[abund > quantile(abund, 1 - ablim) &
(euclid <= quantile(unlist(euclid), 0.5*fitlim) |
euclid >= quantile(unlist(euclid), 1-0.5*fitlim)),]
rownames(best_fit[complete.cases(best_fit),])
}
}
}  else {
print("FATAL: Selected Method unknown")
}
}
ordiselect(m)
ordiselect <-  function(matrix, ord, ablim = 1, fitlim = 1, choices = c(1,2), method = "axes", env, p.max = 0.05, freq = FALSE) {
if(!is.data.frame(matrix)) {
matrix <- data.frame(matrix)
}
if(freq == F) {
abund <- apply(matrix, 2, sum)
} else {
abund <- apply(matrix>0, 2, sum)
}
if(method == "axes") {
scores <- data.frame(scores(ord, display="species", choices=choices))
scores1 <- scores[,1]
scores2 <- scores[,2]
rownames(scores[abund >= quantile(abund, 1 - ablim) &
(scores1 >= quantile(scores1, 1-0.5*fitlim) |
scores1 <= quantile(scores1,0.5*fitlim) |
scores2 >= quantile(scores2, 1-0.5*fitlim) |
scores2 <= quantile(scores2,0.5*fitlim))
,])
}  else if(method=="vars") {
if(class(env) != "envfit") {
print("FATAL: Fitted environmental variables are no result of envfit()")
} else {
scores_spec <- data.frame(scores(ord, display="species", choices=choices))
sig <- env$vectors$pvals
scores_env <- data.frame(scores(env, display="vectors"))
scores_env <- scores_env[sig<p.max,]
if(nrow(scores_env) == 0) {
print("WARNING: No significant environmental variables. Only abundance limit used for selection.")
names(abund[abund >= quantile(abund, 1 - ablim)])
} else if(nrow(scores_env) == 1) {
euclid<-data.frame(fields::rdist(scores_spec, scores_env))
names(euclid)<-rownames(scores_env)
rownames(euclid)<-names(matrix)
rownames(data.frame(euclid[abund > quantile(abund, 1 - ablim) &
(euclid <= quantile(unlist(euclid), 0.5*fitlim) |
euclid >= quantile(unlist(euclid), 1-0.5*fitlim)), ,drop=FALSE]))
} else {
euclid<-data.frame(fields::rdist(scores_spec, scores_env))
names(euclid)<-rownames(scores_env)
rownames(euclid)<-names(matrix)
best_fit<-euclid[abund > quantile(abund, 1 - ablim) &
(euclid <= quantile(unlist(euclid), 0.5*fitlim) |
euclid >= quantile(unlist(euclid), 1-0.5*fitlim)),]
rownames(best_fit[complete.cases(best_fit),])
}
}
}  else {
print("FATAL: Selected Method unknown")
}
}
ordiselect(m)
# GOF - total inertia explained for given number of axes
gof <- "goodness"(m, display = "species", statistic = "explained",summarize = FALSE)
gof
# GOF - total inertia explained for given number of axes
gof <- "goodness"(m, display = "species",
statistic = "explained",
model="CCA"
summarize = FALSE)
# GOF - total inertia explained for given number of axes
gof <- "goodness"(m, display = "species",
statistic = "explained",
model="CCA",
summarize = FALSE)
gof
# GOF - total inertia explained for given number of axes
gof <- "goodness"(m, display = "species",
statistic = "explained",
model="CA",
summarize = FALSE)
gof
# GOF - total inertia explained for given number of axes
gof <- "goodness"(m, display = "species",
statistic = "explained",
model="CCA",
summarize = TRUE,
addprevious = TRUE)
# GOF - total inertia explained for given number of axes
gof <- "goodness"(m, display = "species",
statistic = "explained",
model="CCA",
summarize = TRUE)
gof
# GOF - total inertia explained for given number of axes
gof <- "goodness"(m, display = "species",
statistic = "explained",
model="CCA",
summarize = FALSE)
gof
data(dune)
data(dune.env)
mod <- cca(dune ~ A1 + Management + Condition(Moisture), data=dune.env)
mod
goodness(mod, addprevious = TRUE)
plot(mod)
goodness(mod, addprevious = TRUE, summ = TRUE)
# Inertia components
inertcomp(mod, prop = TRUE)
inertcomp(mod, stat="d")
# Aliased constraints
mod <- cca(dune ~ ., dune.env)
mod
vif.cca(mod)
alias(mod)
with(dune.env, table(Management, Manure))
# The standard correlations (not recommended)
spenvcor(mod)
intersetcor(mod)
spc <- envfit(m, asc)
spc
#   stat_summary(fun.y=mean, geom="point",cex = 2) +
#   stat_summary(fun.y=mean, geom="line",lwd=1, lty=2)
#
# gof2sp[rownames(gof2sp) == nam]
# gof2si[1:10,]
#
#
#
# NOTES
#
nam <- "bom_sch"
dsts <- cbind(stages, asc[,colnames(asc) == nam])
colnames(dsts) <- c("site","succession",nam)
ggplot(dsts, aes(y = log(dsts[,3]+1), x = succession)) +
geom_point() +
geom_smooth()
#                geom="pointrange", lwd=0.8) +
#   stat_summary(fun.y=mean, geom="point",cex = 2) +
#   stat_summary(fun.y=mean, geom="line",lwd=1, lty=2)
#
# gof2sp[rownames(gof2sp) == nam]
# gof2si[1:10,]
#
#
#
# NOTES
spc
nam <- "cer_alb"
dsts <- cbind(stages, asc[,colnames(asc) == nam])
colnames(dsts) <- c("site","succession",nam)
ggplot(dsts, aes(y = log(dsts[,3]+1), x = succession)) +
geom_point() +
geom_smooth()
#                geom="pointrange", lwd=0.8) +
#   stat_summary(fun.y=mean, geom="point",cex = 2) +
#   stat_summary(fun.y=mean, geom="line",lwd=1, lty=2)
#
# gof2sp[rownames(gof2sp) == nam]
# gof2si[1:10,]
#
#
#
# NOTES
spc
nam <- "tet_sal"
dsts <- cbind(stages, asc[,colnames(asc) == nam])
colnames(dsts) <- c("site","succession",nam)
ggplot(dsts, aes(y = log(dsts[,3]+1), x = succession)) +
geom_point() +
geom_smooth()
spc
nam <- "nom_rob"
dsts <- cbind(stages, asc[,colnames(asc) == nam])
colnames(dsts) <- c("site","succession",nam)
ggplot(dsts, aes(y = log(dsts[,3]+1), x = succession)) +
geom_point() +
geom_smooth()
spc
nam <- "bom_pas"
dsts <- cbind(stages, asc[,colnames(asc) == nam])
colnames(dsts) <- c("site","succession",nam)
ggplot(dsts, aes(y = log(dsts[,3]+1), x = succession)) +
geom_point() +
geom_smooth()
nam <- "bom_luc"
dsts <- cbind(stages, asc[,colnames(asc) == nam])
colnames(dsts) <- c("site","succession",nam)
ggplot(dsts, aes(y = log(dsts[,3]+1), x = succession)) +
geom_point() +
geom_smooth()
class(spc)
as.data.frame(spc)
summary(spc)
spc$vectors
as.data.frame(spc$vectors)
as.table(spc$vectors)
rownames(spc$vectors$pvals <= 0.05)
spc$vectors$pvals <= 0.05
names(spc$vectors$pvals <= 0.05)
