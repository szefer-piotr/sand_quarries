#   }
#   colnames(sph)[i] <- new_name
# }
rownames(chr) <- chr[,1]
# chr <- chr[, 3:13]
colnames(chr)
# # convert names
# for(i in 1:dim(chr)[2]){
#   teststr <- as.character(colnames(chr[i]))
#   teststr <- tolower(teststr)
#   nm <- strsplit(teststr,"_")
#   new_name <- paste(substr(nm[[1]][1], 1,3),
#                     substr(nm[[1]][2], 1,3), sep="_")
#   colnames(chr)[i] <- new_name
# }
api <- api[, -grep("site|succession", colnames(api))]
sph <- sph[, -grep("site|succession", colnames(sph))]
chr <- chr[, -grep("site|succession", colnames(chr))]
# Create a combined table ----
asc <- cbind(api, sph, chr)
# Indicate group name
groups <- rep(c("Herbivores", "Predators","Kleptoparasites"),
times=c(dim(api)[2], dim(sph)[2], dim(chr)[2]))
group_col <- rep(c("red", "orange","black"),
times=c(dim(api)[2], dim(sph)[2], dim(chr)[2]))
# Insect community descriptors - data frame ----
# Full data set.
desasc <- rbind(stages,stages,stages)
desasc$group <- rep(c("Herbivores", "Predators","Kleptoparasites"),
each = dim(stages)[1])
ind <-c("shannon")
desasc$sw <- c(diversity(api, index = ind, MARGIN = 1, base = exp(1)),
diversity(sph, index = ind, MARGIN = 1, base = exp(1)),
diversity(chr, index = ind, MARGIN = 1, base = exp(1)))
ind <-c("simpson")
desasc$simp <- c(diversity(api, index = ind, MARGIN = 1, base = exp(1)),
diversity(sph, index = ind, MARGIN = 1, base = exp(1)),
diversity(chr, index = ind, MARGIN = 1, base = exp(1)))
desasc$rich <- c(rowSums(api>0),
rowSums(sph>0),
rowSums(chr>0))
desasc$abun <- c(rowSums(api),
rowSums(sph),
rowSums(chr))
desasc$succession <- as.factor(desasc$succession)
desasc$s1 <- as.numeric(desasc$succession == 1)
desasc$s2 <- as.numeric(desasc$succession == 2)
desasc$s3 <- as.numeric(desasc$succession == 3)
desasc$GS <- interaction(desasc$succession, desasc$group)
s1 <- stages$succession == 1
s2 <- stages$succession == 2
s3 <- stages$succession == 3
stage1 <- list("Herbivores" = as.numeric(sort(colSums(api[s1,]),
decreasing = T)),
"Predators" = as.numeric(sort(colSums(sph[s1,]),
decreasing = T)),
"Kleptoparasites" = as.numeric(sort(colSums(chr[s1,]),
decreasing = T)))
# stage2 <-
# stage3 <-
rac_df <- expand.grid(stage = c("Stage I", "Stage II", "Stage III"),
group = unique(groups))
rac_mxa <- rbind(
# Apiformes
colSums(api[stages$succession == 1, ]),
colSums(api[stages$succession == 2, ]),
colSums(api[stages$succession == 3, ])
)
rac_mxs <- rbind(
# Spheciformes
colSums(sph[stages$succession == 1, ]),
colSums(sph[stages$succession == 2, ]),
colSums(sph[stages$succession == 3, ])
)
rac_mxc <- rbind(
# Chrysididae
colSums(chr[stages$succession == 1, ]),
colSums(chr[stages$succession == 2, ]),
colSums(chr[stages$succession == 3, ])
)
rac_mx <- cbind(rac_mxa,
rac_mxs,
rac_mxc)
# df for multivariate_difference codyn,
# this won't work as we do not have an experimental design
dfa <- data.frame(group = rep("Herbivores", dim(api)[2]),
stage = rep(c("SI","SII","SIII"),
each=dim(api)[2]))
t1 <- rac_mxa[1,]
t2 <- rac_mxa[2,]
t3 <- rac_mxa[3,]
dfa <- cbind(dfa, abund = c(t1,t2,t3))
dfa$spec <- c(names(t1),names(t2),names(t3))
# Rare species data preparation
raredatr <- read.xlsx("data/life_history.xls", "rare_species", startRow = 2)
raredat <- clean_dat(raredatr, clean.row = FALSE)
names(raredat)[1:3] <- c("status", "lifeh", "spec")
matrix.to.data2 <- function(mat, col.shift=0){
# This function takes matrix and converts each entry into a
# data frame with rows and column naes and entry values.
drow <- 1
data <- data.frame(row=0,col=0,val=0)
for (irow in rownames(mat)){
for (icol in colnames(mat)){
if (mat[irow,icol] != 0) {
#print(paste(irow,icol,mat[irow,icol]))
data[drow, ]$row = irow
data[drow, ]$col = icol
data[drow, ]$val = as.numeric(mat[irow,icol])
drow <- drow+1
}
}
}
return(data)
}
raredf = data.frame()
lgth = dim(raredat)[2]
rw = 1
for(rw in 1:dim(raredat)[1]){
rowdes = raredat[rw,1:3]
rowsp=raredat[rw,4:lgth]
specs <- colnames(rowsp)[which(rowsp != 0)]
specno = rowsp[which(rowsp != 0)]
rowdes
rowsp
specs
specno
dfunit = data.frame(site=rep(specs, specno),
status=rowdes$status,
lifeh= rowdes$lifeh,
spec = rowdes$spec)
raredf <- rbind(raredf,dfunit)
}
raredf
raredf$vuln <- as.numeric(!is.na(raredf$status))
raredf$cr <- 0
raredf$cr[grep("CR", raredf$status)] <- 1
raredf$rm <- 0
raredf$rm[grep("rm|vrm", raredf$status)] <- 1
raredf$stage <- 1
raredf$stage[grep("X2", raredf$site)] <- 2
raredf$stage[grep("X3", raredf$site)] <- 3
raredf$sno <- 1
raredf$sno[grep(".1", raredf$site, fixed = T)] <- 2
raredf$sno[grep(".2", raredf$site, fixed = T)] <- 3
raredf$sno[grep(".3", raredf$site, fixed = T)] <- 4
raredf$sno[grep(".4", raredf$site, fixed = T)] <- 5
raredf$sno[grep(".5", raredf$site, fixed = T)] <- 6
raredf$sno[grep(".6", raredf$site, fixed = T)] <- 7
raredf$sno[grep(".7", raredf$site, fixed = T)] <- 8
raredf$sno[grep(".8", raredf$site, fixed = T)] <- 9
raredf$sno[grep(".9", raredf$site, fixed = T)] <- 10
names(raredf)
vulsp0b <- brm(vuln~1+lifeh*as.factor(stage), family = "binomial",
data = raredf)
?glm
?glm.nb
library(MASS)
glm.nb
?glm.nb
library(nlme)
library(nlme4)
glm
?glm
# Source data processing script ----
source("data/data_processing.R")
# library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
# General model
abund_gen <- glm.nb(abun~1+succession, data = desasc)
inter.test_gen <- emmeans(abund_gen, "succession")
phabu_gen <- cld(inter.test_gen, Letter="abcdefghijklm")
abund_int1 <- glm(abun~1+GS,
family = "poisson", data = desasc)
abund_int2 <- glm.nb(abun~1+GS, data = desasc)
abund_int3 <- glm(abun~1+GS, data = desasc)
# Select the best model
AIC(abund_int1, abund_int2,abund_int3)
# >>> Post-hoc ----
inter.test1 <- emmeans(abund_int2, "GS")
phabu <- cld(inter.test1, Letter="abcdefghijklm")
contrast(inter.test1, type = "response")
# 2. Diversity ----
# * SIMPSON ----
# >>> Analysis ----
simpson <- glm(simp~1+GS, data = desasc)
# * SHANNON ----
# >>> Analysis ----
sw <- glm(sw~1+GS, data = desasc)
sw_gen <- glm(sw~succession, data = desasc)
# >>> Post-hoc ----
inter.test2 <- emmeans(sw, "GS")
phsw <- cld(inter.test2, Letter="abcdefghijklm")
inter.test2_gen <- emmeans(sw_gen, "succession")
phsw_gen <- cld(inter.test2_gen, Letter="abcdefghijklm")
# 3. Richness ----
bg <- glm(rich~1+GS, data = desasc, family = "poisson")
bg_gen <- glm(rich~1+succession, data = desasc, family = "poisson")
# >>> Post-hoc ----
inter.test3 <- emmeans(bg, "GS")
phrich <- cld(inter.test3, Letter="abcdefghijklm")
inter.test3_gen <- emmeans(bg_gen, "succession")
phrich_gen <- cld(inter.test3_gen, Letter="abcdefghijklm")
# Facet plot ----
facet_dat <-data.frame(
val = c(log(desasc$abun+1),
desasc$rich,
desasc$sw),
group = rep(desasc$group,3),
stage = rep(desasc$succession, 3),
type = rep(c("No. of individuals",
"Richness",
"Diversity"), each=96)
)
facet_dat$fsucc <- 0
facet_dat[facet_dat$stage == 1,]$fsucc <- "Stage I"
facet_dat[facet_dat$stage == 2,]$fsucc <- "Stage II"
facet_dat[facet_dat$stage == 3,]$fsucc <- "Stage III"
facet_dat$int <- as.character(desasc$GS)
facet_dat$type <- as.character(facet_dat$type)
facet_dat$post_hoc <- "x"
# Generate labels
# For "No. of individuals"
abugroups <- data.frame(int = phabu$GS,
gr = gsub(" ", "", phabu$.group))
abugroups$gr <- as.character(abugroups$gr)
for (itr in abugroups$int){
indices <- (facet_dat$type == "No. of individuals" & facet_dat$int == itr)
facet_dat[indices,]$post_hoc <- abugroups[abugroups$int == itr,]$gr
}
# For "Diversity"
divgroups <- data.frame(int = phsw$GS,
gr = gsub(" ", "", phsw$.group))
divgroups$gr <- as.character(divgroups$gr)
for (itr in divgroups$int){
indices <- (facet_dat$type == "Diversity" & facet_dat$int == itr)
facet_dat[indices,]$post_hoc <- divgroups[divgroups$int == itr,]$gr
}
# For "Richness"
richgroups <- data.frame(int = phrich$GS,
gr = gsub(" ", "", phrich$.group))
richgroups$gr <- as.character(richgroups$gr)
for (itr in richgroups$int){
indices <- (facet_dat$type == "Richness" & facet_dat$int == itr)
facet_dat[indices,]$post_hoc <- richgroups[richgroups$int == itr,]$gr
}
fpl <- ggplot(facet_dat, aes(x = fsucc, y = val,
col = group,
group = group,
label = post_hoc))
fullflp <- fpl + geom_jitter(width=0.1, alpha=0.3, cex=2) +
facet_wrap(~type, scales = "free") +
stat_summary(fun.data=mean_cl_boot,
geom="pointrange", lwd=0.8) +
stat_summary(fun=mean, geom="point",cex = 2) +
stat_summary(fun=mean, geom="line",lwd=1, lty=2)+
stat_summary(fun=mean, geom="text",
col = rgb(10,10,10,180,maxColorValue = 255),
hjust = 1.4,
vjust = -1.5) +
theme() +
xlab("") + ylab("") +
theme_bw() +
scale_color_manual(values=c(colvec[1],
colvec[2],
colvec[3]))
# Table 1 - results from mixed effect models
summary(abund_int2)
summary(sw)
summary(bg)
phrich
phsw
phabu
phrich_gen
phsw_gen
phabu_gen
# Predict abundance
abund_int2
py1 <- data.frame(GS = unique(desasc$GS))
p1  <- predict(abund_int2, newdata=py1, se.fit=TRUE, type='response')
py1 <- data.frame(py1, p1)
py2 <- data.frame(GS = unique(desasc$GS))
p2  <- predict(sw, newdata=py2, se.fit=TRUE, type='response')
py2 <- data.frame(py2, p2)
py3 <- data.frame(GS = unique(desasc$GS))
p3  <- predict(bg, newdata=py3, se.fit=TRUE, type='response')
py3 <- data.frame(py3, p3)
citation(betareg)
library(betareg)
citation(betareg)
citation("betareg")
citation("brms")
# Source data processing script ----
source("data/data_processing.R")
# library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
# General model
abund_gen <- glm.nb(abun~1+succession, data = desasc)
inter.test_gen <- emmeans(abund_gen, "succession")
phabu_gen <- cld(inter.test_gen, Letter="abcdefghijklm")
abund_int1 <- glm(abun~1+GS,
family = "poisson", data = desasc)
abund_int2 <- glm.nb(abun~1+GS, data = desasc)
abund_int3 <- glm(abun~1+GS, data = desasc)
abund_gen
summary(abund_gen)
source("data/data_processing.R")
library(brms)
raredf$fStage <- "Stage I"
raredf[raredf$stage == 2, ]$fStage <- "Stage II"
raredf[raredf$stage == 3, ]$fStage <- "Stage III"
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = gender),
prior(cauchy(0, 10), class = sigma)
)
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = gender),
prior(cauchy(0, 10), class = sigma)
)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = lifeh),
prior(cauchy(0, 10), class = sigma)
)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = fStageStageII),
)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = fStageStageII),
prior(cauchy(0, 10), class = sigma)
)
#
#
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(cauchy(0, 10), class = sigma)
)
#
#
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(cauchy(0, 10), class = sd)
)
#
#
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(cauchy(0, 10), class = sd)
)
#
#
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
gp
ggp[1,1]
gp[1,1]
gp[1,]
gp[1,] <- prior(normal(0, 10)
)
gp
?prior
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), group = lifeh),
prior(normal(0, 10), group = fStage)
)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
gp
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = "b", coef = fStageStageII),
prior(normal(0, 10), group = fStage)
)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
gp
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = "b", coef = fStage),
prior(normal(0, 10), group = fStage)
)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
prior1 <- c(
set_prior(normal(0, 10), class = Intercept),
set_prior(normal(0, 10), class = "b", coef = fStage),
set_prior(normal(0, 10), group = fStage)
)
prior1 <- c(
set_prior("normal(0, 10)", class = Intercept),
set_prior("normal(0, 10)", class = "b", coef = fStage),
set_prior("normal(0, 10)", group = fStage)
)
prior1 <- c(
set_prior("normal(0, 10)", class = "Intercept"),
set_prior("normal(0, 10)", class = "b", coef = fStage)
)
prior1 <- c(
set_prior("normal(0, 10)", class = "Intercept"),
set_prior("normal(0, 10)", class = "b", coef = "fStage")
)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
gp
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = "b", coef = lifeh)
)
prior1
#
#
gp <- get_prior(vuln~1+lifeh, family = bernoulli(),
prior = prior1,
data = raredf)
gp
prior1 <- c(
prior(normal(0, 10), class = "b", coef = "")
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
prior(normal(0, 10), class = "b", coef = "",
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
prior1 <- c(
prior1 <- c(
prior(normal(0, 10), class = "b", coef = ""),
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
prior1 <- c(
prior(normal(0, 10), class = "b", coef = ""),
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
#
#
gp <- get_prior(vuln~1+lifeh, family = bernoulli(),
prior = prior1,
data = raredf)
gp
vulsp0b <- brm(vuln~1+lifeh, family = bernoulli(),
data = raredf,
prior = prior1)
