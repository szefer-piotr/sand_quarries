gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
gp
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = "b", coef = lifeh)
)
prior1
#
#
gp <- get_prior(vuln~1+lifeh, family = bernoulli(),
prior = prior1,
data = raredf)
gp
prior1 <- c(
prior(normal(0, 10), class = "b", coef = "")
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
prior(normal(0, 10), class = "b", coef = "",
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
prior1 <- c(
prior1 <- c(
prior(normal(0, 10), class = "b", coef = ""),
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
prior1 <- c(
prior(normal(0, 10), class = "b", coef = ""),
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
#
#
gp <- get_prior(vuln~1+lifeh, family = bernoulli(),
prior = prior1,
data = raredf)
gp
vulsp0b <- brm(vuln~1+lifeh, family = bernoulli(),
data = raredf,
prior = prior1)
library(brms)
?conditional_effects
citation("brms")
glm(vuln ~ lifeh*fStage, family = bernoulli(link = "logit"))
glm(vuln ~ lifeh*fStage,
family = bernoulli(link = "logit"),
data =rardf)
glm(vuln ~ lifeh*fStage,
family = bernoulli(link = "logit"),
data =raredf)
source("data/data_processing.R")
library(brms)
# library(lme4)
# library(lmerTest)
# Estimating probability of obtaining vulnerable individual
# vulsp0 <- glm(vuln~1, family="bernoulli",
#       data = rdf)
raredf$fStage <- "Stage I"
raredf[raredf$stage == 2, ]$fStage <- "Stage II"
raredf[raredf$stage == 3, ]$fStage <- "Stage III"
prior1 <- c(
prior(normal(0, 10), class = "b", coef = ""),
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
#
#
gp <- get_prior(vuln~1+lifeh, family = bernoulli(),
prior = prior1,
data = raredf)
raredf$vuln <- raredf$vuln == 1
# vulsp0b <- brm(vuln~1+lifeh, family = bernoulli(),
#                data = raredf,
#
glm(vuln ~ lifeh*fStage,
family = bernoulli(link = "logit"),
data =raredf)
preds <- predict(vulsp0c, robust=F) # 95% credible intervals
glm(vuln ~ lifeh*fStage,
family = binomial(link = "logit"),
data =raredf)
summary(glm(vuln ~ lifeh*fStage,
family = binomial(link = "logit"),
data =raredf))
# Ordinary glm
glm1 <- (glm(vuln ~ lifeh*fStage,
family = binomial(link = "logit"),
data =raredf))
it1 <- emmeans(glm1, "succession")
it1 <- emmeans(glm1, "lifeh*fStage")
# Ordinary glm
library(emmeans)
library(multcomp)
it1 <- emmeans(glm1, "lifeh*fStage")
it1 <- emmeans(glm1, "lifeh~fStage")
it1 <- emmeans(glm1, "lifeh|fStage")
it1 <- emmeans(glm1, pairwise~ lifeh|fStage )
pit1 <- cld(it1, Letter="abcdefghijklm")
plot(it1)
it1 <- emmeans(glm1, pairwise~ fStage|lifeh )
plot(it1)
# Comparisons
# Source data processing script ----
source("data/data_processing.R")
# library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
# 1. Abundance ----
# >>> Analysis ----
# This should probably benegative binomial for abundance
# General model
abund_gen <- glm.nb(abun~1+succession, data = desasc)
abund_gen
anova(abund_gen)
summary(abund_gen)
anova(abund_gen)
anova(abund_gen)
agm <- anova(abund_gen)
agm$`Pr(>Chi)`
agm
sw_gen <- glm(sw~succession, data = desasc)
anova(sw_gen)
anova(bg_gen)
bg_gen <- glm(rich~1+succession, data = desasc, family = "poisson")
anova(bg_gen)
bg_gen
summary(bg_gen)
anova(bg_gen)
source("data/data_processing.R")
library(brms)
# library(lme4)
# library(lmerTest)
# Estimating probability of obtaining vulnerable individual
# vulsp0 <- glm(vuln~1, family="bernoulli",
#       data = rdf)
raredf$fStage <- "Stage I"
raredf[raredf$stage == 2, ]$fStage <- "Stage II"
raredf[raredf$stage == 3, ]$fStage <- "Stage III"
raredf$vuln <- raredf$vuln == 1
# vulsp0c <- brm(vuln ~ lifeh*fStage,
#                data = raredf,
#                family = 'bernoulli',
#                prior = set_prior("uniform(2,4)", lb = 2, ub = 4),
#                iter = 1000,
#                chains = 4)
# Ordinary glm
library(emmeans)
library(multcomp)
glm1 <- (glm(vuln ~ lifeh*fStage,
family = binomial(link = "logit"),
data =raredf))
it1 <- emmeans(glm1, pairwise~ fStage|lifeh )
emmip(glm1, vuln ~ fStage|lifeh)
it1 <- emmeans(glm1, pairwise~ fStage|lifeh )
emmip(glm1, vuln ~ fStage|lifeh)
emmip(glm1, fStage~lifeh)
emmip(glm1, lifeh~fStage)
# Comparisons
# Source data processing script ----
source("data/data_processing.R")
# library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
# 1. Abundance ----
# >>> Analysis ----
# This should probably benegative binomial for abundance
# General model
abund_gen <- glm.nb(abun~1+succession, data = desasc)
agm <- anova(abund_gen)
agm
inter.test_gen <- emmeans(abund_gen, "succession")
phabu_gen <- cld(inter.test_gen, Letter="abcdefghijklm")
inter.test_gen <- emmeans(abund_gen, "succession")
phabu_gen <- cld(inter.test_gen, Letter="abcdefghijklm")
phabu_gen
bg_gen <- glm(rich~1+succession, data = desasc, family = "poisson")
bg_gen
inter.test3_gen <- emmeans(bg_gen, "succession")
phrich_gen <- cld(inter.test3_gen, Letter="abcdefghijklm")
phrich_gen
anova(sw_gen)
agm <- anova(abund_gen)
anova(abund_gen, test = "Chi")
dchisq(0.019)
dchisq(2, 0.019)
qchisq(2, 0.019)
?chisq
?pchisq
qchisq(0.019,2)
anova(sw_gen)
sw_gen
sw_gen <- glm(sw~succession, data = desasc)
summary(bg_gen)
bg_gen
summary(bg_gen)
anova(bg_gen)
anova(bg_gen, test=chi)
anova(bg_gen, test="chi")
anova(bg_gen, test="Chisq")
source("data/data_processing.R")
library(labdsv)
# Indicator values
ivs <- indval(asc, clustering = stages$succession)
dfr <-data.frame(Cluster = ivs$maxcls,
IndicatorValue = ivs$indcls,
Probability = ivs$pval)
dfr <- dfr[dfr$Probability <= 0.05,]
dfr <- dfr[order(dfr$Cluster), ]
dfr <- with(dfr, dfr[order(-Cluster, IndicatorValue, decreasing = TRUE),])
dfr
asc
groups
# Contingency table
cbind(rownames(asc),groups)
# Contingency table
cbind(colnames(asc),groups)
# Contingency table
gps <- cbind(colnames(asc),groups)
rownames(gps) <- gps[1,]
gps[1,]
rownames(gps) <- gps[,1]
gps
head(dfr)
dfr$group <- gps[rownames(dfr),]
dfr
dfr
gps
dfr$group <- gps[rownames(dfr),2]
# Ind val
source("data/data_processing.R")
library(labdsv)
# Indicator values
ivs <- indval(asc, clustering = stages$succession)
dfr <-data.frame(Cluster = ivs$maxcls,
IndicatorValue = ivs$indcls,
Probability = ivs$pval)
dfr <- dfr[dfr$Probability <= 0.05,]
dfr <- dfr[order(dfr$Cluster), ]
dfr <- with(dfr, dfr[order(-Cluster, IndicatorValue, decreasing = TRUE),])
# Contingency table
gps <- cbind(colnames(asc),groups)
rownames(gps) <- gps[,1]
dfr$group <- gps[rownames(dfr),2]
dfr
table(dfr$cluster, dfr$group)
table(dfr$Cluster, dfr$group)
ct <- table(dfr$Cluster, dfr$group)
ct
rownames(ct) <- c("SI","SII","SIII")
ct
ct
Ag.3.5.table.entries <- c(ct[1,],  ct[2,],  ct[3,])
Ag.3.5 <- as.table(matrix(Ag.3.5.table.entries, nrow = 3, byrow = TRUE, dimnames = list(Stage = c('Early', 'Mid', 'Late'), Group = c('Herb', 'Klep', 'Pred'))))
Ag.3.5
addmargins(Ag.3.5)
library(MASS)
Ag.3.5.loglm <- loglm( ~ Stage + Group, data = Ag.3.5)
Ag.3.5.loglm
Ag.3.5.loglm
# Ind val
source("data/data_processing.R")
library(labdsv)
# Indicator values
ivs <- indval(asc, clustering = stages$succession)
dfr <-data.frame(Cluster = ivs$maxcls,
IndicatorValue = ivs$indcls,
Probability = ivs$pval)
dfr <- dfr[dfr$Probability <= 0.05,]
dfr <- dfr[order(dfr$Cluster), ]
dfr <- with(dfr, dfr[order(-Cluster, IndicatorValue, decreasing = TRUE),])
# Contingency table
gps <- cbind(colnames(asc),groups)
rownames(gps) <- gps[,1]
dfr$group <- gps[rownames(dfr),2]
ct <- table(dfr$Cluster, dfr$group)
rownames(ct) <- c("SI","SII","SIII")
# Decomposition of 3x3 contingency table
# https://rstudio-pubs-static.s3.amazonaws.com/65435_a8b26773b5d64138b6411a5aa306a5b9.html
Ag.3.5.table.entries <- c(ct[1,],  ct[2,],  ct[3,])
Ag.3.5 <- as.table(matrix(Ag.3.5.table.entries, nrow = 3, byrow = TRUE, dimnames = list(Stage = c('Early', 'Mid', 'Late'), Group = c('Herb', 'Klep', 'Pred'))))
Ag.3.5
addmargins(Ag.3.5)
# Independence between Stage and Group
library(MASS)
Ag.3.5.loglm <- loglm( ~ Stage + Group, data = Ag.3.5)
Ag.3.5.loglm
# Subtables analysis
Ag.3.5.prop.mar.1.cols.12.table <- prop.table(Ag.3.5[,1:2], margin = 1)
# transform to percentages
Ag.3.5.percent.mar.1.cols.12.table <- 100*Ag.3.5.prop.mar.1.cols.12.table
# present ‘percentages’ table
round(Ag.3.5.percent.mar.1.cols.12.table, 1)
Ag.3.6.A <- Ag.3.5[1:2, 1:2]
Ag.3.6.A
Ag.3.6.A.loglm <- loglm( ~ School + Origin, data = Ag.3.6.A)
Ag.3.6.A.loglm <- loglm( ~ Stage + Group, data = Ag.3.6.A)
Ag.3.6.A.loglm
Ag.3.6.A
# Herb and Klep are homogenous in Early and Mid stage
margin.table(Ag.3.6.A, margin = 1)
Ag.3.5
Ag.3.5 <- t(Ag.3.5)
addmargins(Ag.3.5)
# Independence between Stage and Group
library(MASS)
Ag.3.5.loglm <- loglm( ~ Stage + Group, data = Ag.3.5)
Ag.3.5.loglm
# Subtables analysis
Ag.3.5.prop.mar.1.cols.12.table <- prop.table(Ag.3.5[,1:2], margin = 1)
# transform to percentages
Ag.3.5.percent.mar.1.cols.12.table <- 100*Ag.3.5.prop.mar.1.cols.12.table
# present ‘percentages’ table
round(Ag.3.5.percent.mar.1.cols.12.table, 1)
Ag.3.5
# Subtables analysis
Ag.3.5.prop.mar.1.cols.12.table <- prop.table(Ag.3.5[1:2,], margin = 2)
# Subtables analysis
Ag.3.5.prop.mar.2.rows.12.table <- prop.table(Ag.3.5[1:2,], margin = 2)
Ag.3.5.prop.mar.2.rows.12.table
# transform to percentages
Ag.3.5.percent.mar.2.rows.12.table <- 100*Ag.3.5.prop.mar.2.rows.12.table
Ag.3.5.percent.mar.2.rows.12.table
# Two columns Early and Late that have similar proportions
Ag.3.5.prop.mar.1.cols.13.table <- prop.table(Ag.3.5[,c(1,3)], margin = 1)
Ag.3.5.prop.mar.1.cols.13.table
indval
ivs
dfr
?indval
# Indicator values
ivs <- indval(asc, clustering = stages$succession, numitr = 9999)
dfr <-data.frame(Cluster = ivs$maxcls,
IndicatorValue = ivs$indcls,
Probability = ivs$pval)
dfr <- dfr[dfr$Probability <= 0.05,]
dfr <- dfr[order(dfr$Cluster), ]
dfr <- with(dfr, dfr[order(-Cluster, IndicatorValue, decreasing = TRUE),])
# Contingency table
gps <- cbind(colnames(asc),groups)
rownames(gps) <- gps[,1]
dfr$group <- gps[rownames(dfr),2]
ct <- table(dfr$Cluster, dfr$group)
rownames(ct) <- c("SI","SII","SIII")
gps
ct
dfr
# Contingency table
gps <- cbind(colnames(asc),groups)
rownames(gps) <- gps[,1]
dfr$group <- gps[rownames(dfr),2]
ct <- table(dfr$Cluster, dfr$group)
rownames(ct) <- c("SI","SII","SIII")
ct
# Decomposition of 3x3 contingency table
# https://rstudio-pubs-static.s3.amazonaws.com/65435_a8b26773b5d64138b6411a5aa306a5b9.html
Ag.3.5.table.entries <- c(ct[1,],  ct[2,],  ct[3,])
Ag.3.5 <- as.table(matrix(Ag.3.5.table.entries, nrow = 3, byrow = TRUE, dimnames = list(Stage = c('Early', 'Mid', 'Late'), Group = c('Herb', 'Klep', 'Pred'))))
Ag.3.5 <- t(Ag.3.5)
addmargins(Ag.3.5)
Ag.3.5
# Two columns Early and Late that have similar proportions
Ag.3.5.prop.mar.1.cols.13.table <- prop.table(Ag.3.5[,c(1,3)], margin = 1)
# transform to percentages
Ag.3.5.percent.mar.2.rows.12.table <- 100*Ag.3.5.prop.mar.2.rows.12.table
Ag.3.5.prop.mar.1.cols.13.table
# transform to percentages
Ag.3.5.percent.mar.1.cols.13.table <- 100*Ag.3.5.prop.mar.1.cols.13.table
Ag.3.5.percent.mar.1.cols.13.table
Ag.3.6.A <- Ag.3.5[1:3, 1:3]
Ag.3.6.A
Ag.3.6.A <- Ag.3.5[c(1,3), c(1,3)]
Ag.3.6.A
Ag.3.6.A.loglm <- loglm( ~ Stage + Group, data = Ag.3.6.A)
Ag.3.6.A.loglm
Ag.3.5.percent.mar.1.cols.13.table
Ag.3.6.A
# Ho is true, this is homogenous: it is true that its row and column marginal totals contain the information that lie within the individual cells
margin.table(Ag.3.6.A, margin = 1)
# Ho is true, this is homogenous: it is true that its row and column marginal totals contain the information that lie within the individual cells
margin.table(Ag.3.6.A, margin = 2)
# Ho is true, this is homogenous: it is true that its row and column marginal totals contain the information that lie within the individual cells
margin.table(Ag.3.6.A, margin = 1)
Ag.3.6.A
# Ind val
source("data/data_processing.R")
library(labdsv)
# Indicator values
ivs <- indval(asc, clustering = stages$succession, numitr = 9999)
dfr <-data.frame(Cluster = ivs$maxcls,
IndicatorValue = ivs$indcls,
Probability = ivs$pval)
dfr <- dfr[dfr$Probability <= 0.05,]
dfr <- dfr[order(dfr$Cluster), ]
dfr <- with(dfr, dfr[order(-Cluster, IndicatorValue, decreasing = TRUE),])
# Contingency table
gps <- cbind(colnames(asc),groups)
rownames(gps) <- gps[,1]
dfr$group <- gps[rownames(dfr),2]
ct <- table(dfr$Cluster, dfr$group)
rownames(ct) <- c("SI","SII","SIII")
# Decomposition of 3x3 contingency table
# https://rstudio-pubs-static.s3.amazonaws.com/65435_a8b26773b5d64138b6411a5aa306a5b9.html
Ag.3.5.table.entries <- c(ct[1,],  ct[2,],  ct[3,])
Ag.3.5 <- as.table(matrix(Ag.3.5.table.entries, nrow = 3, byrow = TRUE, dimnames = list(Stage = c('Early', 'Mid', 'Late'), Group = c('Herb', 'Klep', 'Pred'))))
Ag.3.5 <- t(Ag.3.5)
addmargins(Ag.3.5)
# Independence between Stage and Group
library(MASS)
Ag.3.5.loglm <- loglm( ~ Stage + Group, data = Ag.3.5)
Ag.3.5.loglm
# Reject the hypothesis that Stage and Group are independent. There is a strong relationship between these two.
# Subtables analysis
# Two rows Herb and Klep that have similar proportions
Ag.3.5.prop.mar.2.rows.12.table <- prop.table(Ag.3.5[1:2,], margin = 2)
# transform to percentages
Ag.3.5.percent.mar.2.rows.12.table <- 100*Ag.3.5.prop.mar.2.rows.12.table
# Two columns Early and Late that have similar proportions
Ag.3.5.prop.mar.1.cols.13.table <- prop.table(Ag.3.5[,c(1,3)], margin = 1)
# transform to percentages
Ag.3.5.percent.mar.1.cols.13.table <- 100*Ag.3.5.prop.mar.1.cols.13.table
Ag.3.6.A <- Ag.3.5[c(1,3), c(1,3)]
Ag.3.6.A
Ag.3.6.A.loglm <- loglm( ~ Stage + Group, data = Ag.3.6.A)
Ag.3.6.A.loglm
# Ho is true, this is homogenous: it is true that its row and column marginal totals contain the information that lie within the individual cells
margin.table(Ag.3.6.A, margin = 1)
set.seed(123)
# Indicator values
ivs <- indval(asc, clustering = stages$succession, numitr = 9999)
dfr <-data.frame(Cluster = ivs$maxcls,
IndicatorValue = ivs$indcls,
Probability = ivs$pval)
dfr <- dfr[dfr$Probability <= 0.05,]
dfr <- dfr[order(dfr$Cluster), ]
dfr <- with(dfr, dfr[order(-Cluster, IndicatorValue, decreasing = TRUE),])
# Contingency table
gps <- cbind(colnames(asc),groups)
rownames(gps) <- gps[,1]
dfr$group <- gps[rownames(dfr),2]
ct <- table(dfr$Cluster, dfr$group)
rownames(ct) <- c("SI","SII","SIII")
ct
# Decomposition of 3x3 contingency table
# https://rstudio-pubs-static.s3.amazonaws.com/65435_a8b26773b5d64138b6411a5aa306a5b9.html
Ag.3.5.table.entries <- c(ct[1,],  ct[2,],  ct[3,])
Ag.3.5 <- as.table(matrix(Ag.3.5.table.entries, nrow = 3, byrow = TRUE, dimnames = list(Stage = c('Early', 'Mid', 'Late'), Group = c('Herb', 'Klep', 'Pred'))))
Ag.3.5 <- t(Ag.3.5)
addmargins(Ag.3.5)
# Independence between Stage and Group
library(MASS)
Ag.3.5.loglm <- loglm( ~ Stage + Group, data = Ag.3.5)
Ag.3.5.loglm
# Two rows Herb and Klep that have similar proportions
Ag.3.5.prop.mar.2.rows.12.table <- prop.table(Ag.3.5[1:2,], margin = 2)
# transform to percentages
Ag.3.5.percent.mar.2.rows.12.table <- 100*Ag.3.5.prop.mar.2.rows.12.table
# Two columns Early and Late that have similar proportions
Ag.3.5.prop.mar.1.cols.13.table <- prop.table(Ag.3.5[,c(1,3)], margin = 1)
# transform to percentages
Ag.3.5.percent.mar.1.cols.13.table <- 100*Ag.3.5.prop.mar.1.cols.13.table
Ag.3.6.A <- Ag.3.5[c(1,3), c(1,3)]
Ag.3.6.A
Ag.3.6.A.loglm <- loglm( ~ Stage + Group, data = Ag.3.6.A)
Ag.3.6.A.loglm
# Ho is true, this is homogenous: it is true that its row and column marginal totals contain the information that lie within the individual cells
margin.table(Ag.3.6.A, margin = 1)
# Ho is true, this is homogenous: it is true that its row and column marginal totals contain the information that lie within the individual cells
margin.table(Ag.3.6.A, margin = 1)
Ag.3.6.A
Ag.3.6.B <- as.table(matrix(c(margin.table(Ag.3.6.A, margin = 1),
Ag.3.5[1:2,3]),
nrow = 2,
byrow = FALSE,
dimnames = list(School = c('Herb', 'Pred'),
Stage = c('Early+Late', 'Mid'))))
Ag.3.6.B
Ag.3.5
Ag.3.6.B
Ag.3.6.B <- as.table(matrix(c(margin.table(Ag.3.6.A, margin = 1),
Ag.3.5[c(1,3),2]),
nrow = 2,
byrow = FALSE,
dimnames = list(School = c('Herb', 'Pred'),
Stage = c('Early+Late', 'Mid'))))
Ag.3.6.B
Ag.3.6.B <- as.table(matrix(c(margin.table(Ag.3.6.A, margin = 1),
Ag.3.5[c(1,3),2]),
nrow = 2,
byrow = FALSE,
dimnames = list(Group = c('Herb', 'Pred'),
Stage = c('Early+Late', 'Mid'))))
Ag.3.6.B
Ag.3.6.C.loglm <- loglm( ~  Stage + Group, data = Ag.3.6.C)
Ag.3.6.B.loglm <- loglm( ~  Stage + Group, data = Ag.3.6.B)
Ag.3.6.B.loglm
Ag.3.5.loglm
Ag.3.6.A.loglm
Ag.3.6.B.loglm
