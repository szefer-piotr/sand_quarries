glm
?glm
# Source data processing script ----
source("data/data_processing.R")
# library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
# General model
abund_gen <- glm.nb(abun~1+succession, data = desasc)
inter.test_gen <- emmeans(abund_gen, "succession")
phabu_gen <- cld(inter.test_gen, Letter="abcdefghijklm")
abund_int1 <- glm(abun~1+GS,
family = "poisson", data = desasc)
abund_int2 <- glm.nb(abun~1+GS, data = desasc)
abund_int3 <- glm(abun~1+GS, data = desasc)
# Select the best model
AIC(abund_int1, abund_int2,abund_int3)
# >>> Post-hoc ----
inter.test1 <- emmeans(abund_int2, "GS")
phabu <- cld(inter.test1, Letter="abcdefghijklm")
contrast(inter.test1, type = "response")
# 2. Diversity ----
# * SIMPSON ----
# >>> Analysis ----
simpson <- glm(simp~1+GS, data = desasc)
# * SHANNON ----
# >>> Analysis ----
sw <- glm(sw~1+GS, data = desasc)
sw_gen <- glm(sw~succession, data = desasc)
# >>> Post-hoc ----
inter.test2 <- emmeans(sw, "GS")
phsw <- cld(inter.test2, Letter="abcdefghijklm")
inter.test2_gen <- emmeans(sw_gen, "succession")
phsw_gen <- cld(inter.test2_gen, Letter="abcdefghijklm")
# 3. Richness ----
bg <- glm(rich~1+GS, data = desasc, family = "poisson")
bg_gen <- glm(rich~1+succession, data = desasc, family = "poisson")
# >>> Post-hoc ----
inter.test3 <- emmeans(bg, "GS")
phrich <- cld(inter.test3, Letter="abcdefghijklm")
inter.test3_gen <- emmeans(bg_gen, "succession")
phrich_gen <- cld(inter.test3_gen, Letter="abcdefghijklm")
# Facet plot ----
facet_dat <-data.frame(
val = c(log(desasc$abun+1),
desasc$rich,
desasc$sw),
group = rep(desasc$group,3),
stage = rep(desasc$succession, 3),
type = rep(c("No. of individuals",
"Richness",
"Diversity"), each=96)
)
facet_dat$fsucc <- 0
facet_dat[facet_dat$stage == 1,]$fsucc <- "Stage I"
facet_dat[facet_dat$stage == 2,]$fsucc <- "Stage II"
facet_dat[facet_dat$stage == 3,]$fsucc <- "Stage III"
facet_dat$int <- as.character(desasc$GS)
facet_dat$type <- as.character(facet_dat$type)
facet_dat$post_hoc <- "x"
# Generate labels
# For "No. of individuals"
abugroups <- data.frame(int = phabu$GS,
gr = gsub(" ", "", phabu$.group))
abugroups$gr <- as.character(abugroups$gr)
for (itr in abugroups$int){
indices <- (facet_dat$type == "No. of individuals" & facet_dat$int == itr)
facet_dat[indices,]$post_hoc <- abugroups[abugroups$int == itr,]$gr
}
# For "Diversity"
divgroups <- data.frame(int = phsw$GS,
gr = gsub(" ", "", phsw$.group))
divgroups$gr <- as.character(divgroups$gr)
for (itr in divgroups$int){
indices <- (facet_dat$type == "Diversity" & facet_dat$int == itr)
facet_dat[indices,]$post_hoc <- divgroups[divgroups$int == itr,]$gr
}
# For "Richness"
richgroups <- data.frame(int = phrich$GS,
gr = gsub(" ", "", phrich$.group))
richgroups$gr <- as.character(richgroups$gr)
for (itr in richgroups$int){
indices <- (facet_dat$type == "Richness" & facet_dat$int == itr)
facet_dat[indices,]$post_hoc <- richgroups[richgroups$int == itr,]$gr
}
fpl <- ggplot(facet_dat, aes(x = fsucc, y = val,
col = group,
group = group,
label = post_hoc))
fullflp <- fpl + geom_jitter(width=0.1, alpha=0.3, cex=2) +
facet_wrap(~type, scales = "free") +
stat_summary(fun.data=mean_cl_boot,
geom="pointrange", lwd=0.8) +
stat_summary(fun=mean, geom="point",cex = 2) +
stat_summary(fun=mean, geom="line",lwd=1, lty=2)+
stat_summary(fun=mean, geom="text",
col = rgb(10,10,10,180,maxColorValue = 255),
hjust = 1.4,
vjust = -1.5) +
theme() +
xlab("") + ylab("") +
theme_bw() +
scale_color_manual(values=c(colvec[1],
colvec[2],
colvec[3]))
# Table 1 - results from mixed effect models
summary(abund_int2)
summary(sw)
summary(bg)
phrich
phsw
phabu
phrich_gen
phsw_gen
phabu_gen
# Predict abundance
abund_int2
py1 <- data.frame(GS = unique(desasc$GS))
p1  <- predict(abund_int2, newdata=py1, se.fit=TRUE, type='response')
py1 <- data.frame(py1, p1)
py2 <- data.frame(GS = unique(desasc$GS))
p2  <- predict(sw, newdata=py2, se.fit=TRUE, type='response')
py2 <- data.frame(py2, p2)
py3 <- data.frame(GS = unique(desasc$GS))
p3  <- predict(bg, newdata=py3, se.fit=TRUE, type='response')
py3 <- data.frame(py3, p3)
citation(betareg)
library(betareg)
citation(betareg)
citation("betareg")
citation("brms")
# Source data processing script ----
source("data/data_processing.R")
# library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
# General model
abund_gen <- glm.nb(abun~1+succession, data = desasc)
inter.test_gen <- emmeans(abund_gen, "succession")
phabu_gen <- cld(inter.test_gen, Letter="abcdefghijklm")
abund_int1 <- glm(abun~1+GS,
family = "poisson", data = desasc)
abund_int2 <- glm.nb(abun~1+GS, data = desasc)
abund_int3 <- glm(abun~1+GS, data = desasc)
abund_gen
summary(abund_gen)
source("data/data_processing.R")
library(brms)
raredf$fStage <- "Stage I"
raredf[raredf$stage == 2, ]$fStage <- "Stage II"
raredf[raredf$stage == 3, ]$fStage <- "Stage III"
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = gender),
prior(cauchy(0, 10), class = sigma)
)
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = gender),
prior(cauchy(0, 10), class = sigma)
)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = lifeh),
prior(cauchy(0, 10), class = sigma)
)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = fStageStageII),
)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b, coef = fStageStageII),
prior(cauchy(0, 10), class = sigma)
)
#
#
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(cauchy(0, 10), class = sigma)
)
#
#
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(cauchy(0, 10), class = sd)
)
#
#
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(cauchy(0, 10), class = sd)
)
#
#
get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
gp
ggp[1,1]
gp[1,1]
gp[1,]
gp[1,] <- prior(normal(0, 10)
)
gp
?prior
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), group = lifeh),
prior(normal(0, 10), group = fStage)
)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
gp
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = "b", coef = fStageStageII),
prior(normal(0, 10), group = fStage)
)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
gp
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = "b", coef = fStage),
prior(normal(0, 10), group = fStage)
)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
prior1 <- c(
set_prior(normal(0, 10), class = Intercept),
set_prior(normal(0, 10), class = "b", coef = fStage),
set_prior(normal(0, 10), group = fStage)
)
prior1 <- c(
set_prior("normal(0, 10)", class = Intercept),
set_prior("normal(0, 10)", class = "b", coef = fStage),
set_prior("normal(0, 10)", group = fStage)
)
prior1 <- c(
set_prior("normal(0, 10)", class = "Intercept"),
set_prior("normal(0, 10)", class = "b", coef = fStage)
)
prior1 <- c(
set_prior("normal(0, 10)", class = "Intercept"),
set_prior("normal(0, 10)", class = "b", coef = "fStage")
)
#
#
gp <- get_prior(vuln~1+lifeh*fStage, family = bernoulli(),
prior = prior1,
data = raredf)
gp
vulsp0b <- brm(vuln~1+lifeh*fStage, family = bernoulli(),
data = raredf,
prior = prior1)
prior1 <- c(
prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = "b", coef = lifeh)
)
prior1
#
#
gp <- get_prior(vuln~1+lifeh, family = bernoulli(),
prior = prior1,
data = raredf)
gp
prior1 <- c(
prior(normal(0, 10), class = "b", coef = "")
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
prior(normal(0, 10), class = "b", coef = "",
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
prior1 <- c(
prior1 <- c(
prior(normal(0, 10), class = "b", coef = ""),
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
prior1 <- c(
prior(normal(0, 10), class = "b", coef = ""),
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
#
#
gp <- get_prior(vuln~1+lifeh, family = bernoulli(),
prior = prior1,
data = raredf)
gp
vulsp0b <- brm(vuln~1+lifeh, family = bernoulli(),
data = raredf,
prior = prior1)
library(brms)
?conditional_effects
citation("brms")
glm(vuln ~ lifeh*fStage, family = bernoulli(link = "logit"))
glm(vuln ~ lifeh*fStage,
family = bernoulli(link = "logit"),
data =rardf)
glm(vuln ~ lifeh*fStage,
family = bernoulli(link = "logit"),
data =raredf)
source("data/data_processing.R")
library(brms)
# library(lme4)
# library(lmerTest)
# Estimating probability of obtaining vulnerable individual
# vulsp0 <- glm(vuln~1, family="bernoulli",
#       data = rdf)
raredf$fStage <- "Stage I"
raredf[raredf$stage == 2, ]$fStage <- "Stage II"
raredf[raredf$stage == 3, ]$fStage <- "Stage III"
prior1 <- c(
prior(normal(0, 10), class = "b", coef = ""),
prior(normal(0, 10), class = "b", coef = "lifehkleptoparasite"),
prior(normal(0, 10), class = "b", coef = "lifehpredator"),
prior(normal(0, 10), class = Intercept)
)
#
#
gp <- get_prior(vuln~1+lifeh, family = bernoulli(),
prior = prior1,
data = raredf)
raredf$vuln <- raredf$vuln == 1
# vulsp0b <- brm(vuln~1+lifeh, family = bernoulli(),
#                data = raredf,
#
glm(vuln ~ lifeh*fStage,
family = bernoulli(link = "logit"),
data =raredf)
preds <- predict(vulsp0c, robust=F) # 95% credible intervals
glm(vuln ~ lifeh*fStage,
family = binomial(link = "logit"),
data =raredf)
summary(glm(vuln ~ lifeh*fStage,
family = binomial(link = "logit"),
data =raredf))
# Ordinary glm
glm1 <- (glm(vuln ~ lifeh*fStage,
family = binomial(link = "logit"),
data =raredf))
it1 <- emmeans(glm1, "succession")
it1 <- emmeans(glm1, "lifeh*fStage")
# Ordinary glm
library(emmeans)
library(multcomp)
it1 <- emmeans(glm1, "lifeh*fStage")
it1 <- emmeans(glm1, "lifeh~fStage")
it1 <- emmeans(glm1, "lifeh|fStage")
it1 <- emmeans(glm1, pairwise~ lifeh|fStage )
pit1 <- cld(it1, Letter="abcdefghijklm")
plot(it1)
it1 <- emmeans(glm1, pairwise~ fStage|lifeh )
plot(it1)
# Comparisons
# Source data processing script ----
source("data/data_processing.R")
# library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
# 1. Abundance ----
# >>> Analysis ----
# This should probably benegative binomial for abundance
# General model
abund_gen <- glm.nb(abun~1+succession, data = desasc)
abund_gen
anova(abund_gen)
summary(abund_gen)
anova(abund_gen)
anova(abund_gen)
agm <- anova(abund_gen)
agm$`Pr(>Chi)`
agm
sw_gen <- glm(sw~succession, data = desasc)
anova(sw_gen)
anova(bg_gen)
bg_gen <- glm(rich~1+succession, data = desasc, family = "poisson")
anova(bg_gen)
bg_gen
summary(bg_gen)
anova(bg_gen)
source("data/data_processing.R")
library(brms)
# library(lme4)
# library(lmerTest)
# Estimating probability of obtaining vulnerable individual
# vulsp0 <- glm(vuln~1, family="bernoulli",
#       data = rdf)
raredf$fStage <- "Stage I"
raredf[raredf$stage == 2, ]$fStage <- "Stage II"
raredf[raredf$stage == 3, ]$fStage <- "Stage III"
raredf$vuln <- raredf$vuln == 1
# vulsp0c <- brm(vuln ~ lifeh*fStage,
#                data = raredf,
#                family = 'bernoulli',
#                prior = set_prior("uniform(2,4)", lb = 2, ub = 4),
#                iter = 1000,
#                chains = 4)
# Ordinary glm
library(emmeans)
library(multcomp)
glm1 <- (glm(vuln ~ lifeh*fStage,
family = binomial(link = "logit"),
data =raredf))
it1 <- emmeans(glm1, pairwise~ fStage|lifeh )
emmip(glm1, vuln ~ fStage|lifeh)
it1 <- emmeans(glm1, pairwise~ fStage|lifeh )
emmip(glm1, vuln ~ fStage|lifeh)
emmip(glm1, fStage~lifeh)
emmip(glm1, lifeh~fStage)
# Comparisons
# Source data processing script ----
source("data/data_processing.R")
# library(nlme)
library(MASS)
library(emmeans)
library(multcomp)
# 1. Abundance ----
# >>> Analysis ----
# This should probably benegative binomial for abundance
# General model
abund_gen <- glm.nb(abun~1+succession, data = desasc)
agm <- anova(abund_gen)
agm
inter.test_gen <- emmeans(abund_gen, "succession")
phabu_gen <- cld(inter.test_gen, Letter="abcdefghijklm")
inter.test_gen <- emmeans(abund_gen, "succession")
phabu_gen <- cld(inter.test_gen, Letter="abcdefghijklm")
phabu_gen
bg_gen <- glm(rich~1+succession, data = desasc, family = "poisson")
bg_gen
inter.test3_gen <- emmeans(bg_gen, "succession")
phrich_gen <- cld(inter.test3_gen, Letter="abcdefghijklm")
phrich_gen
anova(sw_gen)
agm <- anova(abund_gen)
anova(abund_gen, test = "Chi")
dchisq(0.019)
dchisq(2, 0.019)
qchisq(2, 0.019)
?chisq
?pchisq
qchisq(0.019,2)
anova(sw_gen)
sw_gen
sw_gen <- glm(sw~succession, data = desasc)
summary(bg_gen)
bg_gen
summary(bg_gen)
anova(bg_gen)
anova(bg_gen, test=chi)
anova(bg_gen, test="chi")
anova(bg_gen, test="Chisq")
